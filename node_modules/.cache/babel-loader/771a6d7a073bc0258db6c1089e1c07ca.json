{"ast":null,"code":"var _jsxFileName = \"/Users/heytea/react-music-player-lbt/src/components/playbar/index.js\";\nimport React, { Component } from \"react\";\nimport '../../statics/style/playbar.css';\nimport store from '../../store';\nimport Audio from \"../audio\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass PlayBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.formatDuration = value => {\n      const time = value / 1000;\n      const min = Math.floor(time / 60);\n      min.toString().padStart(2, '0');\n      const sec = Math.floor(time % 60);\n      sec.toString().padStart(2, '0');\n      return `${min}:${sec}`;\n    };\n\n    this.onNextClick = () => {};\n\n    this.onPrevClick = () => {};\n\n    this.onShowLyricsClick = () => {\n      alert('后面有空会做滚动歌词哒');\n    };\n\n    this.state = store.getState();\n  }\n\n  componentDidMount() {// store.subscribe(this.onHandleSetState)\n  } // onHandleSetState = () => {\n  //     this.setState(store.getState())\n  // }\n\n\n  render() {\n    if (this.state.isPlaying) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playbar\",\n        children: /*#__PURE__*/_jsxDEV(Audio, {\n          audioUrl: this.props.mp3Url,\n          imageUrl: this.props.currentSongItem.imageUrl,\n          artistName: this.props.currentSongItem.artistName,\n          name: this.props.currentSongItem.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n}\n\nexport default PlayBar;","map":{"version":3,"sources":["/Users/heytea/react-music-player-lbt/src/components/playbar/index.js"],"names":["React","Component","store","Audio","PlayBar","constructor","props","formatDuration","value","time","min","Math","floor","toString","padStart","sec","onNextClick","onPrevClick","onShowLyricsClick","alert","state","getState","componentDidMount","render","isPlaying","mp3Url","currentSongItem","imageUrl","artistName","name"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,iCAAP;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;;AAEA,MAAMC,OAAN,SAAsBH,SAAtB,CAAgC;AAC5BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAKnBC,cALmB,GAKDC,KAAD,IAAW;AACxB,YAAMC,IAAI,GAAGD,KAAK,GAAG,IAArB;AACA,YAAME,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAZ;AACAC,MAAAA,GAAG,CAACG,QAAJ,GAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B;AACA,YAAMC,GAAG,GAAGJ,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAZ;AACAM,MAAAA,GAAG,CAACF,QAAJ,GAAeC,QAAf,CAAwB,CAAxB,EAA2B,GAA3B;AACA,aAAQ,GAAEJ,GAAI,IAAGK,GAAI,EAArB;AACH,KAZkB;;AAAA,SAsBnBC,WAtBmB,GAsBL,MAAM,CAEnB,CAxBkB;;AAAA,SA0BnBC,WA1BmB,GA0BL,MAAM,CAEnB,CA5BkB;;AAAA,SA8BnBC,iBA9BmB,GA8BC,MAAM;AACtBC,MAAAA,KAAK,CAAC,aAAD,CAAL;AACH,KAhCkB;;AAEf,SAAKC,KAAL,GAAalB,KAAK,CAACmB,QAAN,EAAb;AACH;;AAWDC,EAAAA,iBAAiB,GAAG,CAChB;AACH,GAjB2B,CAmB5B;AACA;AACA;;;AAcAC,EAAAA,MAAM,GAAG;AACD,QAAI,KAAKH,KAAL,CAAWI,SAAf,EAA0B;AACtB,0BACI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACI,QAAC,KAAD;AACI,UAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWmB,MADzB;AAEI,UAAA,QAAQ,EAAE,KAAKnB,KAAL,CAAWoB,eAAX,CAA2BC,QAFzC;AAGI,UAAA,UAAU,EAAE,KAAKrB,KAAL,CAAWoB,eAAX,CAA2BE,UAH3C;AAII,UAAA,IAAI,EAAE,KAAKtB,KAAL,CAAWoB,eAAX,CAA2BG;AAJrC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAUH;AACJ;;AAhDuB;;AAmDhC,eAAezB,OAAf","sourcesContent":["import React, {Component} from \"react\";\nimport '../../statics/style/playbar.css';\nimport store from '../../store';\nimport Audio from \"../audio\";\n\nclass PlayBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = store.getState()\n    }\n\n    formatDuration = (value) => {\n        const time = value / 1000\n        const min = Math.floor(time / 60)\n        min.toString().padStart(2, '0')\n        const sec = Math.floor(time % 60)\n        sec.toString().padStart(2, '0')\n        return `${min}:${sec}`\n    }\n\n    componentDidMount() {\n        // store.subscribe(this.onHandleSetState)\n    }\n\n    // onHandleSetState = () => {\n    //     this.setState(store.getState())\n    // }\n\n    onNextClick = () => {\n\n    }\n\n    onPrevClick = () => {\n\n    }\n\n    onShowLyricsClick = () => {\n        alert('后面有空会做滚动歌词哒')\n    }\n\n    render() {\n            if (this.state.isPlaying) {\n                return (\n                    <div className=\"playbar\">\n                        <Audio\n                            audioUrl={this.props.mp3Url}\n                            imageUrl={this.props.currentSongItem.imageUrl}\n                            artistName={this.props.currentSongItem.artistName}\n                            name={this.props.currentSongItem.name}\n                        />\n                    </div>\n                )\n            }\n        }\n}\n\nexport default PlayBar;"]},"metadata":{},"sourceType":"module"}