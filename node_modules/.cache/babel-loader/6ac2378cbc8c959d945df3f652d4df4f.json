{"ast":null,"code":"import axios from \"axios\";\nimport store from \"../store\";\nconst storeValue = store.getState();\nexport const getBanner = () => {\n  axios.get('http://localhost:3000/banner?type=0').then(value => {\n    const { ...banners\n    } = value.data.banners;\n    const bannerImageUrl = [];\n\n    for (let i = 0; i < value.data.banners.length; i++) {\n      bannerImageUrl.push(banners[i].imageUrl);\n    }\n\n    const action = {\n      type: 'get_banner_list',\n      value: bannerImageUrl\n    };\n    store.dispatch(action);\n  }).catch(error => {\n    console.log('getBanner error', error);\n  });\n};\nexport const getNewsong = () => {\n  const newSongList = {};\n  const newSongItem = {\n    id: '',\n    name: '',\n    imageUrl: ''\n  };\n  axios.get('http://localhost:3000/personalized/newsong').then(value => {\n    for (let i = 0; i < value.data.result.length; i++) {\n      const { ...newsongData\n      } = value.data.result;\n      newSongItem.id = newsongData[i].id;\n      newSongItem.name = newsongData[i].name;\n      newSongItem.imageUrl = newsongData[i].picUrl;\n      newSongList.push(...newSongItem);\n      console.log(newSongItem);\n    }\n\n    newSongList.map(item => {\n      console.log(item);\n      axios.post('http://localhost:3000/song/url', {\n        id: item.id\n      }).then(value => {\n        console.log(value.data.data[0].url);\n      }).catch(() => {});\n    });\n    const action = {\n      type: 'get_newsong_value',\n      value: newSongList\n    };\n    store.dispatch(action);\n  }).catch(error => {\n    console.log('getNewsong error', error);\n  });\n};\nexport const getSongUrl = () => {};","map":{"version":3,"sources":["/Users/heytea/lbt-music/src/services/api.js"],"names":["axios","store","storeValue","getState","getBanner","get","then","value","banners","data","bannerImageUrl","i","length","push","imageUrl","action","type","dispatch","catch","error","console","log","getNewsong","newSongList","newSongItem","id","name","result","newsongData","picUrl","map","item","post","url","getSongUrl"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport store from \"../store\";\nconst storeValue = store.getState()\n\nexport const getBanner = () => {\n    axios.get('http://localhost:3000/banner?type=0')\n        .then((value) => {\n            const { ...banners } = value.data.banners\n            const bannerImageUrl = []\n            for(let i=0 ; i < value.data.banners.length; i++){\n                bannerImageUrl.push(banners[i].imageUrl)\n            }\n            const action ={\n                type: 'get_banner_list',\n                value: bannerImageUrl\n            }\n            store.dispatch(action)\n        })\n        .catch((error)=>{\n            console.log('getBanner error', error)\n        })\n}\n\nexport const getNewsong = () => {\n    const newSongList = {}\n    const newSongItem = {\n        id: '',\n        name: '',\n        imageUrl: '',\n    }\n    axios.get('http://localhost:3000/personalized/newsong')\n        .then((value)=>{\n            for(let i = 0; i <  value.data.result.length; i++){\n                const { ...newsongData } = value.data.result\n                newSongItem.id = newsongData[i].id;\n                newSongItem.name = newsongData[i].name;\n                newSongItem.imageUrl = newsongData[i].picUrl;\n                newSongList.push(...newSongItem)\n                console.log(newSongItem);\n            }\n            newSongList.map((item)=>{\n                console.log(item)\n                axios.post(\n                    'http://localhost:3000/song/url',\n                    {id: item.id}\n                ).then((value)=>{\n                    console.log(value.data.data[0].url);\n                }).catch(()=>{\n\n                })\n            })\n            const action = {\n                type: 'get_newsong_value',\n                value: newSongList\n            }\n            store.dispatch(action)\n        })\n        .catch((error)=>{\n            console.log('getNewsong error', error)\n        })\n}\n\nexport const getSongUrl = () => {\n\n}\n"]},"metadata":{},"sourceType":"module"}